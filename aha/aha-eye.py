#!/usr/bin/python
#Analyse log files generated from aha-worker and generate reports
#FIXME If a PID is reused during an SSH sessions aha might be confused
#a better solution than shadowing the process list is to contruct the
#process vectors on the fly

from ahalib import *
import getopt
logfile='aha.log'
aha = AHAActions(None,None)
ptress = ProcessTrees()

def usage(exitcode):
    print """ 
Analyze log files of aha-worker and recovers process trees

OPTIONS

    -h Shows this screen
    -e Specifies an export file (i.e. accessible through apache)
    -l Specifies the log file generated by aha-worker

AUTHOR
    Gerard Wagener

LICENSE

    GPL
"""
    sys.exit(exitcode)

def extract_object(obj,exportdir):
    try:
        #FIXME Until now discard decisions from aha
        if obj.has_key('block') and obj.has_key('insult'):
            return 
        tp = int(obj['type'][0])
        pid = int(obj['pid'][0])
        ppid = int(obj['ppid'][0])
        ts = obj['timestamp']
        #handle sys_clone messages
        if (tp == 2):
            ptress.searchTree(pid,ppid)
            
        
        #handle sys_execve
        if (tp ==  1):
            file = obj['file'][0]
            if file == '/usr/sbin/sshd':
                print "Potential new user found: pid=",pid,"ppid=",ppid
                ptress.addUser(pid)
                ptress.annotateProcessList(obj) 
                return
            if ptress.searchTree(pid,ppid):
                print "User related command: ",file,"pid=",pid," ppid=",ppid
                #Annotation info is only available in sys_execve messages
                print "annotate process ",pid
                ptress.annotateProcessList(obj)                   
        #But need to record ppid for pid reusage .grrr
        if (tp == 2):
            if (ptress.searchTree(pid,ppid)):
                ptress.annotateProcessList(obj)
        # Thread exited
        if (tp == 3):
            if ptress.does_user_disconnects(pid):
                #User disconnected generate a report, to avoid that other 
                #information is droped
                print "List export is triggered for root ",pid
                ptress.exportUserListTxt(exportdir)
                ptress.silent_remove_pid(pid)
                #Cleanup annotated list
                print "Clean annotated list"
                ptress.clean_aplist(pid)
    except ValueError,e:
        sys.stderr.write("Failed to parse "+str(obj) + '\n')
    except KeyError,e:
        sys.stderr.write("Incomplete message\n")
 
try:
    line        = None
    logfile     = None
    exportdir   = None
    opts,args = getopt.getopt(sys.argv[1:],"hl:e:",["help","logfile=", "export="])
    for o,a in opts:
        if o  in ('--help','-h'):
            usage(0)
        if o in ('--logfile','-l'):
            logfile = a
        if o in ('--export','-e'):
            exportdir = a 
    if logfile == None:
        sys.stderr.write('A log file from aha-worker needs to be specified\n')
        sys.exit(1)
    #Load config file and get opts
    if exportdir == None:
        sys.stderr.write('An export file needs to be specified\n')
        sys.exit(1)
    f = open(logfile,'r')
    for line in f:
        (timestamp,key,serobj) = line.split('|',2)
        obj = aha.unserializeMessage(serobj)
        extract_object(obj,exportdir)
    f.close()
    #Dump process trees
    ptress.exportUserListTxt(exportdir)
    sys.exit(0)
except ValueError,e:
    #File may be incomplete
    sys.stderr("Value error, file may be incomplete\n")
    sys.stderr.write(str(e) + '\n')
    sys.stderr.write(line)

except getopt.GetoptError,e:
    sys.stderr.write(str(e)+'\n')
    sys.exit(1)
